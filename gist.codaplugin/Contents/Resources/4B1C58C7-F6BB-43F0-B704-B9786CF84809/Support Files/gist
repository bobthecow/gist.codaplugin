#!/usr/bin/env ruby

=begin

INSTALL:

  curl http://github.com/defunkt/gist/raw/master/gist.rb > gist &&
  chmod 755 gist &&
  sudo mv gist /usr/local/bin/gist

USE:

  gist < file.txt
  echo secret | gist -p # or --private
  gist 1234 > something.txt

=end

require 'open-uri'
require 'net/http'
require 'md5'
require 'socket'
require 'osx/cocoa'

module Gist
  extend self

  @@gist_url = 'http://gist.github.com/%s.txt'

  def read(gist_id)
    return help if gist_id == '-h' || gist_id.nil? || gist_id[/help/]
    open(@@gist_url % gist_id).read
  end

  def write(content, private_gist)
    url = URI.parse('http://gist.github.com/gists')
    req = Net::HTTP.post_form(url, data(nil, nil, content, private_gist))
    copy req['Location']

    g = Growl::Notifier.alloc.init
    g.start('test_app', ['message_type'])
    g.notify('message_type', 'gist created', req['Location']+' copied to clipboard')

  end

  def help
    "USE:\n  " + File.read(__FILE__).match(/USE:(.+?)=end/m)[1].strip
  end

private
  def copy(content)
    case RUBY_PLATFORM
    when /darwin/
      return content if `which pbcopy`.strip == ''
      IO.popen('pbcopy', 'r+') { |clip| clip.puts content }
    when /linux/
      return content if `which xclip`.strip == ''
      IO.popen('xclip', 'r+') { |clip| clip.puts content }
    end

    content
  end

  def data(name, ext, content, private_gist)
    return {
      'file_ext[gistfile1]'      => ext,
      'file_name[gistfile1]'     => name,
      'file_contents[gistfile1]' => content
    }.merge(private_gist ? { 'private' => 'on' } : {}).merge(auth)
  end

  def auth
    user  = `git config --global github.user`.strip
    token = `git config --global github.token`.strip

    user.empty? ? {} : { :login => user, :token => token }
  end
end

module Growl
  class Notifier < OSX::NSObject
    include OSX
    attr_accessor :delegate
    
    GROWL_IS_READY = "Lend Me Some Sugar; I Am Your Neighbor!"
    GROWL_NOTIFICATION_CLICKED = "GrowlClicked!"
    GROWL_NOTIFICATION_TIMED_OUT = "GrowlTimedOut!"
    GROWL_KEY_CLICKED_CONTEXT = "ClickedContext"
    
    
    def initWithDelegate(delegate)
      init
      @delegate = delegate
      self
    end
    
    def start(appname, notifications, default_notifications=nil, appicon=nil)
      @appname = appname
      @notifications = notifications
      @default_notifications = default_notifications
      @appicon = appicon
      @default_notifications = @notifications unless @default_notifications
      register
    end
    
    def notify(type, title, desc, click_context=nil, sticky=false, priority=0, icon=nil)
      dic = {
        :ApplicationName => @appname,
        :ApplicationPID => NSProcessInfo.processInfo.processIdentifier,
        :NotificationName => type,
        :NotificationTitle => title,
        :NotificationDescription => desc,
        :NotificationPriority => priority,
      }
      dic[:NotificationIcon] = icon.TIFFRepresentation if icon
      dic[:NotificationSticky] = 1 if sticky
      dic[:NotificationClickContext] = click_context if click_context
      
      c = NSDistributedNotificationCenter.defaultCenter
      c.postNotificationName_object_userInfo_deliverImmediately(:GrowlNotification, nil, dic, true)
    end
    
    KEY_TABLE = {
      :type => :NotificationName,
      :title => :NotificationTitle,
      :desc => :NotificationDescription,
      :clickContext => :NotificationClickContext,
      :sticky => :NotificationSticky,
      :priority => :NotificationPriority,
      :icon => :NotificationIcon,
    }
    
    def notifyWith(hash)
      dic = {}
      KEY_TABLE.each {|k,v| dic[v] = hash[k] if hash.key?(k) }
      dic[:ApplicationName] = @appname
      dic[:ApplicationPID] = NSProcessInfo.processInfo.processIdentifier
      
      c = NSDistributedNotificationCenter.defaultCenter
      c.postNotificationName_object_userInfo_deliverImmediately(:GrowlNotification, nil, dic, true)
    end
    
    
    def onReady(n)
      register
    end
    
    def onClicked(n)
      context = n.userInfo[GROWL_KEY_CLICKED_CONTEXT].to_s
      @delegate.growl_onClicked(self, context) if @delegate && @delegate.respond_to?(:growl_onClicked)
    end
    
    def onTimeout(n)
      context = n.userInfo[GROWL_KEY_CLICKED_CONTEXT].to_s
      @delegate.growl_onTimeout(self, context) if @delegate && @delegate.respond_to?(:growl_onTimeout)
    end
    
    
    private
    
    def register
      pid = NSProcessInfo.processInfo.processIdentifier.to_i
      
      c = NSDistributedNotificationCenter.defaultCenter
      c.addObserver_selector_name_object(self, 'onReady:', GROWL_IS_READY, nil)
      c.addObserver_selector_name_object(self, 'onClicked:', "#{@appname}-#{pid}-#{GROWL_NOTIFICATION_CLICKED}", nil)
      c.addObserver_selector_name_object(self, 'onTimeout:', "#{@appname}-#{pid}-#{GROWL_NOTIFICATION_TIMED_OUT}", nil)
      
      icon = @appicon || NSApplication.sharedApplication.applicationIconImage
      dic = {
        :ApplicationName => @appname,
        :AllNotifications => @notifications,
        :DefaultNotifications => @default_notifications,
        :ApplicationIcon => icon.TIFFRepresentation,
      }
      c.postNotificationName_object_userInfo_deliverImmediately(:GrowlApplicationRegistrationNotification, nil, dic, true)
    end
  end
end

if $stdin.tty?
  puts Gist.read(ARGV.first)
else
  puts Gist.write($stdin.read, %w[-p --private].include?(ARGV.first))
end
